--- a/osslsigncode.c	2018-12-04 21:17:07.000000000 +0000
+++ b/osslsigncode.c	2020-11-08 16:22:22.000000000 +0000
@@ -470,6 +470,16 @@
 	return (p[1]&0x80) ? (2 + (p[1]&0x7f)) : 2;
 }
 
+// Add a custom timestamp to the PKCS7 structure to prevent OpenSSL
+// adding the _current_ time. This allows to create a deterministic
+// signature when no trusted timestamp server was specified, making
+// osslsigncode behaviour similar to signtool.exe.
+static int pkcs7_add_custom_time(PKCS7_SIGNER_INFO *si, time_t customtimeutc)
+{
+	ASN1_TIME *t = ASN1_TIME_adj(NULL, customtimeutc, 0, 0);
+	return PKCS7_add_signed_attribute(si, NID_pkcs9_signingTime, V_ASN1_UTCTIME, t);
+}
+
 static void tohex(const unsigned char *v, unsigned char *b, int len)
 {
 	int i;
@@ -837,6 +847,7 @@
 			"\t\t[ -t <timestampurl> [ -t ... ] [ -p <proxy> ] [ -noverifypeer ] ]\n"
 			"\t\t[ -ts <timestampurl> [ -ts ... ] [ -p <proxy> ] [ -noverifypeer ] ]\n"
 #endif
+			"\t\t[ -st <unix-time> ]\n"
 			"\t\t[ -addUnauthenticatedBlob ]\n\n"
 			"\t\t[ -nest ]\n\n"
 			"\t\t[ -verbose ]\n\n"
@@ -1220,7 +1231,7 @@
 
 // pkcs7_set_nested_signature adds the p7nest signature to p7
 // as a nested signature (SPC_NESTED_SIGNATURE).
-static int pkcs7_set_nested_signature(PKCS7 *p7, PKCS7 *p7nest) {
+static int pkcs7_set_nested_signature(PKCS7 *p7, PKCS7 *p7nest, int custom_ts, time_t customtimeutc) {
 	u_char *p = NULL;
 	int len = 0;
 
@@ -1235,6 +1246,10 @@
 	OPENSSL_free(p);
 
 	PKCS7_SIGNER_INFO *si = sk_PKCS7_SIGNER_INFO_value(p7->d.sign->signer_info, 0);
+
+	if (custom_ts)
+		pkcs7_add_custom_time(si, customtimeutc);
+
 	if (PKCS7_add_attribute(si, OBJ_txt2nid(SPC_NESTED_SIGNATURE_OBJID), V_ASN1_SEQUENCE, astr) == 0)
 		return 0;
 
@@ -2375,6 +2390,7 @@
 	PKCS7_SIGNER_INFO *si;
 	ASN1_STRING *astr;
 	const EVP_MD *md;
+	time_t customtimeutc = (time_t)0;
 
 	const char *argv0 = argv[0];
 	static char buf[64*1024];
@@ -2535,6 +2551,9 @@
 		} else if ((cmd == CMD_SIGN) && !strcmp(*argv, "-i")) {
 			if (--argc < 1) usage(argv0);
 			url = *(++argv);
+		} else if ((cmd == CMD_SIGN) && !strcmp(*argv, "-st")) {
+			if (--argc < 1) usage(argv0);
+			customtimeutc = (time_t)strtoul(*(++argv), NULL, 10);
 #ifdef ENABLE_CURL
 		} else if ((cmd == CMD_SIGN) && !strcmp(*argv, "-t")) {
 			if (--argc < 1) usage(argv0);
@@ -3114,13 +3133,18 @@
 	PKCS7_set_type(sig, NID_pkcs7_signed);
 
 	si = NULL;
-	if (cert != NULL)
+	if (cert != NULL) {
 		si = PKCS7_add_signature(sig, cert, pkey, md);
+		if (nturl == 0 && ntsurl == 0)
+			pkcs7_add_custom_time(si, customtimeutc);
+	}
 	if (si == NULL) {
 		for (i=0; i<sk_X509_num(certs); i++) {
 			X509 *signcert = sk_X509_value(certs, i);
 			/* X509_print_fp(stdout, signcert); */
 			si = PKCS7_add_signature(sig, signcert, pkey, md);
+			if (nturl == 0 && ntsurl == 0)
+				pkcs7_add_custom_time(si, customtimeutc);
 			if (si != NULL) break;
 		}
 	}
@@ -3270,7 +3294,7 @@
 		if (cursig == NULL) {
 			DO_EXIT_0("no 'cursig' was extracted. this points to a bug in the code. aborting...\n")
 		}
-		if (pkcs7_set_nested_signature(cursig, sig) == 0)
+		if (pkcs7_set_nested_signature(cursig, sig, (nturl == 0 && ntsurl == 0), customtimeutc) == 0)
 			DO_EXIT_0("unable to append the nested signature to the current signature\n");
 		outsig = cursig;
 	} else {
