diff --git a/CMakeLists.txt b/CMakeLists.txt
index 45d763d5a9c1d..4df2393063dd1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -78,20 +78,11 @@ option(BUILD_SHARED_LIBS "Build shared libraries" ON)
 option(ENABLE_ARES "Set to ON to enable c-ares support" OFF)
 if(WIN32)
   option(CURL_STATIC_CRT "Set to ON to build libcurl with static CRT on Windows (/MT)." OFF)
-  option(ENABLE_INET_PTON "Set to OFF to prevent usage of inet_pton when building against modern SDKs while still requiring compatibility with older Windows versions, such as Windows XP, Windows Server 2003 etc." ON)
   option(ENABLE_UNICODE "Set to ON to use the Unicode version of the Windows API functions" OFF)
   set(CURL_TARGET_WINDOWS_VERSION "" CACHE STRING "Minimum target Windows version as hex string")
   if(CURL_TARGET_WINDOWS_VERSION)
     add_definitions(-D_WIN32_WINNT=${CURL_TARGET_WINDOWS_VERSION})
     set(CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS} -D_WIN32_WINNT=${CURL_TARGET_WINDOWS_VERSION}")
-  elseif(ENABLE_INET_PTON)
-    # _WIN32_WINNT_VISTA (0x0600)
-    add_definitions(-D_WIN32_WINNT=0x0600)
-    set(CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS} -D_WIN32_WINNT=0x0600")
-  else()
-    # _WIN32_WINNT_WINXP (0x0501)
-    add_definitions(-D_WIN32_WINNT=0x0501)
-    set(CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS} -D_WIN32_WINNT=0x0501")
   endif()
   if(ENABLE_UNICODE)
     add_definitions(-DUNICODE -D_UNICODE)
diff --git a/lib/Makefile.m32 b/lib/Makefile.m32
index 1987b237e5d4e..bf8d1b400a1ea 100644
--- a/lib/Makefile.m32
+++ b/lib/Makefile.m32
@@ -115,7 +115,7 @@ LDFLAGS = $(CURL_LDFLAG_EXTRAS) $(CURL_LDFLAG_EXTRAS_DLL)
 AR = $(CURL_AR)
 RANLIB = $(CURL_RANLIB)
 RC = $(CROSSPREFIX)windres
-RCFLAGS = --include-dir=$(PROOT)/include -DDEBUGBUILD=0 -O coff
+RCFLAGS = --include-dir=$(PROOT)/include -O coff
 STRIP   = $(CROSSPREFIX)strip -g
 
 # Set environment var ARCH to your architecture to override autodetection.
diff --git a/docs/examples/Makefile.m32 b/docs/examples/Makefile.m32
index 15eaf82b3a8b7..c00899ec008ed 100644
--- a/docs/examples/Makefile.m32
+++ b/docs/examples/Makefile.m32
@@ -118,7 +118,7 @@ CC = $(CURL_CC)
 CFLAGS = -O3 $(CURL_CFLAG_EXTRAS) -W -Wall
 LDFLAGS = $(CURL_LDFLAG_EXTRAS) $(CURL_LDFLAG_EXTRAS_EXE)
 RC = $(CROSSPREFIX)windres
-RCFLAGS = --include-dir=$(PROOT)/include -O coff
+RCFLAGS = --include-dir=$(PROOT)/include -O coff $(CURL_RCFLAG_EXTRAS)
 
 # Set environment var ARCH to your architecture to override autodetection.
 ifndef ARCH
@@ -129,6 +129,7 @@ ARCH = w32
 endif
 endif
 
+ifneq ($(ARCH),custom)
 ifeq ($(ARCH),w64)
 CFLAGS  += -m64
 LDFLAGS += -m64
@@ -138,6 +139,7 @@ CFLAGS  += -m32
 LDFLAGS += -m32
 RCFLAGS += -F pe-i386
 endif
+endif
 
 # Platform-dependent helper tool macros
 ifeq ($(findstring /sh,$(SHELL)),/sh)
diff --git a/lib/Makefile.m32 b/lib/Makefile.m32
index bf8d1b400a1ea..85c3dd55676fd 100644
--- a/lib/Makefile.m32
+++ b/lib/Makefile.m32
@@ -115,7 +115,7 @@ LDFLAGS = $(CURL_LDFLAG_EXTRAS) $(CURL_LDFLAG_EXTRAS_DLL)
 AR = $(CURL_AR)
 RANLIB = $(CURL_RANLIB)
 RC = $(CROSSPREFIX)windres
-RCFLAGS = --include-dir=$(PROOT)/include -O coff
+RCFLAGS = --include-dir=$(PROOT)/include -O coff $(CURL_RCFLAG_EXTRAS)
 STRIP   = $(CROSSPREFIX)strip -g
 
 # Set environment var ARCH to your architecture to override autodetection.
@@ -127,6 +127,7 @@ ARCH = w32
 endif
 endif
 
+ifneq ($(ARCH),custom)
 ifeq ($(ARCH),w64)
 CFLAGS  += -m64
 LDFLAGS += -m64
@@ -136,6 +137,7 @@ CFLAGS  += -m32
 LDFLAGS += -m32
 RCFLAGS += -F pe-i386
 endif
+endif
 
 # Platform-dependent helper tool macros
 ifeq ($(findstring /sh,$(SHELL)),/sh)
diff --git a/src/Makefile.m32 b/src/Makefile.m32
index b3d3cf9631f08..caa0fdf721b62 100644
--- a/src/Makefile.m32
+++ b/src/Makefile.m32
@@ -119,7 +119,7 @@ CFLAGS = -O3 $(CURL_CFLAG_EXTRAS) -W -Wall
 LDFLAGS = $(CURL_LDFLAG_EXTRAS) $(CURL_LDFLAG_EXTRAS_EXE)
 AR = $(CURL_AR)
 RC = $(CROSSPREFIX)windres
-RCFLAGS = --include-dir=$(PROOT)/include -O coff -DCURL_EMBED_MANIFEST
+RCFLAGS = --include-dir=$(PROOT)/include -O coff -DCURL_EMBED_MANIFEST $(CURL_RCFLAG_EXTRAS)
 STRIP   = $(CROSSPREFIX)strip -g
 
 # We may need these someday
@@ -135,6 +135,7 @@ ARCH = w32
 endif
 endif
 
+ifneq ($(ARCH),custom)
 ifeq ($(ARCH),w64)
 CFLAGS  += -m64
 LDFLAGS += -m64
@@ -144,6 +145,7 @@ CFLAGS  += -m32
 LDFLAGS += -m32
 RCFLAGS += -F pe-i386
 endif
+endif
 
 # Platform-dependent helper tool macros
 ifeq ($(findstring /sh,$(SHELL)),/sh)
diff --git a/docs/examples/Makefile.m32 b/docs/examples/Makefile.m32
index 6ff03a6a1..3a98b66bd 100644
--- a/docs/examples/Makefile.m32
+++ b/docs/examples/Makefile.m32
@@ -278,7 +278,12 @@ ifdef SSL
     curl_LDADD += -L"$(NGHTTP3_PATH)/lib" -lnghttp3
     ifdef NGTCP2
       CFLAGS += -DUSE_NGTCP2
-      curl_LDADD += -L"$(NGTCP2_PATH)/lib" -lngtcp2 -lngtcp2_crypto_openssl
+      curl_LDADD += -L"$(NGTCP2_PATH)/lib"
+      ifdef NGTCP2_LIBS
+        curl_LDADD += $(NGTCP2_LIBS)
+      else
+        curl_LDADD += -lngtcp2 -lngtcp2_crypto_openssl
+      endif
     endif
   endif
 
diff --git a/lib/Makefile.m32 b/lib/Makefile.m32
index 3311a89ea..8cc72dae5 100644
--- a/lib/Makefile.m32
+++ b/lib/Makefile.m32
@@ -293,7 +293,12 @@ ifdef SSL
     ifdef NGTCP2
       INCLUDES += -I"$(NGTCP2_PATH)/include"
       CFLAGS += -DUSE_NGTCP2
-      DLL_LIBS += -L"$(NGTCP2_PATH)/lib" -lngtcp2 -lngtcp2_crypto_openssl
+      DLL_LIBS += -L"$(NGTCP2_PATH)/lib"
+      ifdef NGTCP2_LIBS
+        DLL_LIBS += $(NGTCP2_LIBS)
+      else
+        DLL_LIBS += -lngtcp2 -lngtcp2_crypto_openssl
+      endif
     endif
   endif
 
diff --git a/src/Makefile.m32 b/src/Makefile.m32
index 8d57debec..b202bf087 100644
--- a/src/Makefile.m32
+++ b/src/Makefile.m32
@@ -303,7 +303,12 @@ ifdef SSL
     curl_LDADD += -L"$(NGHTTP3_PATH)/lib" -lnghttp3
     ifdef NGTCP2
       CFLAGS += -DUSE_NGTCP2
-      curl_LDADD += -L"$(NGTCP2_PATH)/lib" -lngtcp2 -lngtcp2_crypto_openssl
+      curl_LDADD += -L"$(NGTCP2_PATH)/lib"
+      ifdef NGTCP2_LIBS
+        curl_LDADD += $(NGTCP2_LIBS)
+      else
+        curl_LDADD += -lngtcp2 -lngtcp2_crypto_openssl
+      endif
     endif
   endif
 
diff --git a/lib/ldap.c b/lib/ldap.c
index 51a32dc96..77b719fb3 100644
--- a/lib/ldap.c
+++ b/lib/ldap.c
@@ -45,6 +45,13 @@
 # else
 #  include <winber.h>
 # endif
+  /* Undefine wincrypt conflicting symbols for BoringSSL. */
+# undef X509_NAME
+# undef X509_EXTENSIONS
+# undef PKCS7_ISSUER_AND_SERIAL
+# undef PKCS7_SIGNER_INFO
+# undef OCSP_REQUEST
+# undef OCSP_RESPONSE
 #else
 # define LDAP_DEPRECATED 1      /* Be sure ldap_init() is defined. */
 # ifdef HAVE_LBER_H
diff --git a/lib/vtls/schannel.h b/lib/vtls/schannel.h
index 0b4c4d934..1b4cfe5fd 100644
--- a/lib/vtls/schannel.h
+++ b/lib/vtls/schannel.h
@@ -29,6 +29,14 @@
 #ifdef USE_SCHANNEL
 
 #include <schnlsp.h>
+/* Undefine wincrypt conflicting symbols for BoringSSL. */
+#undef X509_NAME
+#undef X509_EXTENSIONS
+#undef PKCS7_ISSUER_AND_SERIAL
+#undef PKCS7_SIGNER_INFO
+#undef OCSP_REQUEST
+#undef OCSP_RESPONSE
+
 #include <schannel.h>
 #include "curl_sspi.h"
 
diff --git a/lib/vtls/openssl.c b/lib/vtls/openssl.c
index 78aacd0228553..25e065d6cbceb 100644
--- a/lib/vtls/openssl.c
+++ b/lib/vtls/openssl.c
@@ -4454,7 +4454,13 @@ static size_t ossl_version(char *buffer, size_t size)
                    (LIBRESSL_VERSION_NUMBER>>12)&0xff);
 #endif
 #elif defined(OPENSSL_IS_BORINGSSL)
+#ifdef CURL_BORINGSSL_VERSION
+  return msnprintf(buffer, size, "%s/%s",
+                   OSSL_PACKAGE,
+                   CURL_BORINGSSL_VERSION);
+#else
   return msnprintf(buffer, size, OSSL_PACKAGE);
+#endif
 #elif defined(HAVE_OPENSSL_VERSION) && defined(OPENSSL_VERSION_STRING)
   return msnprintf(buffer, size, "%s/%s",
                    OSSL_PACKAGE, OpenSSL_version(OPENSSL_VERSION_STRING));
diff --git a/docs/examples/Makefile.m32 b/docs/examples/Makefile.m32
index 3a98b66bd7fd5..f802d55367f04 100644
--- a/docs/examples/Makefile.m32
+++ b/docs/examples/Makefile.m32
@@ -113,11 +113,14 @@ endif
 ifeq ($(CURL_AR),)
 CURL_AR := $(CROSSPREFIX)ar
 endif
+ifeq ($(CURL_RC),)
+CURL_RC := $(CROSSPREFIX)windres
+endif
 
 CC = $(CURL_CC)
 CFLAGS = -O3 $(CURL_CFLAG_EXTRAS) -W -Wall
 LDFLAGS = $(CURL_LDFLAG_EXTRAS) $(CURL_LDFLAG_EXTRAS_EXE)
-RC = $(CROSSPREFIX)windres
+RC = $(CURL_RC)
 RCFLAGS = --include-dir=$(PROOT)/include -O coff $(CURL_RCFLAG_EXTRAS)
 
 # Set environment var ARCH to your architecture to override autodetection.
diff --git a/lib/Makefile.m32 b/lib/Makefile.m32
index 8cc72dae5279e..7166c1b5dc053 100644
--- a/lib/Makefile.m32
+++ b/lib/Makefile.m32
@@ -108,15 +108,21 @@ endif
 ifeq ($(CURL_RANLIB),)
 CURL_RANLIB := $(CROSSPREFIX)ranlib
 endif
+ifeq ($(CURL_RC),)
+CURL_RC := $(CROSSPREFIX)windres
+endif
+ifeq ($(CURL_STRIP),)
+CURL_STRIP := $(CROSSPREFIX)strip
+endif
 
 CC = $(CURL_CC)
 CFLAGS = -O3 $(CURL_CFLAG_EXTRAS) -W -Wall
 LDFLAGS = $(CURL_LDFLAG_EXTRAS) $(CURL_LDFLAG_EXTRAS_DLL)
 AR = $(CURL_AR)
 RANLIB = $(CURL_RANLIB)
-RC = $(CROSSPREFIX)windres
+RC = $(CURL_RC)
 RCFLAGS = --include-dir=$(PROOT)/include -O coff $(CURL_RCFLAG_EXTRAS)
-STRIP   = $(CROSSPREFIX)strip -g
+STRIP   = $(CURL_STRIP) -g
 
 # Set environment var ARCH to your architecture to override autodetection.
 ifndef ARCH
diff --git a/src/Makefile.m32 b/src/Makefile.m32
index b202bf0879085..8ed3fee827a17 100644
--- a/src/Makefile.m32
+++ b/src/Makefile.m32
@@ -113,14 +113,20 @@ endif
 ifeq ($(CURL_AR),)
 CURL_AR := $(CROSSPREFIX)ar
 endif
+ifeq ($(CURL_RC),)
+CURL_RC := $(CROSSPREFIX)windres
+endif
+ifeq ($(CURL_STRIP),)
+CURL_STRIP := $(CROSSPREFIX)strip
+endif
 
 CC = $(CURL_CC)
 CFLAGS = -O3 $(CURL_CFLAG_EXTRAS) -W -Wall
 LDFLAGS = $(CURL_LDFLAG_EXTRAS) $(CURL_LDFLAG_EXTRAS_EXE)
 AR = $(CURL_AR)
-RC = $(CROSSPREFIX)windres
+RC = $(CURL_RC)
 RCFLAGS = --include-dir=$(PROOT)/include -O coff -DCURL_EMBED_MANIFEST $(CURL_RCFLAG_EXTRAS)
-STRIP   = $(CROSSPREFIX)strip -g
+STRIP   = $(CURL_STRIP) -g
 
 # We may need these someday
 # PERL = perl
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5ecb944c7b15c..758e7fefa8932 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -67,7 +67,11 @@ message(STATUS "curl version=[${CURL_VERSION}]")
 # SET(PACKAGE_STRING "curl-")
 # SET(PACKAGE_BUGREPORT "a suitable curl mailing list => https://curl.se/mail/")
 set(OPERATING_SYSTEM "${CMAKE_SYSTEM_NAME}")
-set(OS "\"${CMAKE_SYSTEM_NAME}${CURL_OS_SUFFIX}\"")
+if(CMAKE_C_COMPILER_TARGET)
+  set(OS "\"${CMAKE_C_COMPILER_TARGET}\"")
+else()
+  set(OS "\"${CMAKE_SYSTEM_NAME}\"")
+endif()
 
 include_directories(${CURL_SOURCE_DIR}/include)
 
diff --git a/lib/config-win32.h b/lib/config-win32.h
index 932515667f916..25e81cf190061 100644
--- a/lib/config-win32.h
+++ b/lib/config-win32.h
@@ -663,7 +663,7 @@ Vista
 /* ---------------------------------------------------------------- */
 
 /* Define cpu-machine-OS */
-#undef OS
+#if !defined(OS)
 #if defined(_M_IX86) || defined(__i386__) /* x86 (MSVC or gcc) */
 #define OS "i386-pc-win32"
 #elif defined(_M_X64) || defined(__x86_64__) /* x86_64 (MSVC >=2005 or gcc) */
@@ -677,6 +677,7 @@ Vista
 #else
 #define OS "unknown-pc-win32"
 #endif
+#endif
 
 /* Name of package */
 #define PACKAGE "curl"
diff --git a/CMake/FindNGTCP2.cmake b/CMake/FindNGTCP2.cmake
index 37b060ea0..61e54c2d6 100644
--- a/CMake/FindNGTCP2.cmake
+++ b/CMake/FindNGTCP2.cmake
@@ -71,7 +71,7 @@ endif()
 if(NGTCP2_FIND_COMPONENTS)
   set(NGTCP2_CRYPTO_BACKEND "")
   foreach(component IN LISTS NGTCP2_FIND_COMPONENTS)
-    if(component MATCHES "^(OpenSSL|GnuTLS)")
+    if(component MATCHES "^(BoringSSL|OpenSSL|GnuTLS)")
       if(NGTCP2_CRYPTO_BACKEND)
         message(FATAL_ERROR "NGTCP2: Only one crypto library can be selected")
       endif()
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5350e8798..5ecb944c7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -451,6 +451,7 @@ if(CURL_USE_OPENSSL)
   check_symbol_exists(RAND_status "${CURL_INCLUDES}" HAVE_RAND_STATUS)
   check_symbol_exists(RAND_screen "${CURL_INCLUDES}" HAVE_RAND_SCREEN)
   check_symbol_exists(RAND_egd    "${CURL_INCLUDES}" HAVE_RAND_EGD)
+  check_symbol_exists(OPENSSL_IS_BORINGSSL "openssl/base.h" HAVE_BORINGSSL)
 
   add_definitions(-DOPENSSL_SUPPRESS_DEPRECATED)
 endif()
@@ -506,7 +507,7 @@ function(CheckQuicSupportInOpenSSL)
   set(CMAKE_REQUIRED_LIBRARIES  "${OPENSSL_LIBRARIES}")
   check_symbol_exists(SSL_CTX_set_quic_method "openssl/ssl.h" HAVE_SSL_CTX_SET_QUIC_METHOD)
   if(NOT HAVE_SSL_CTX_SET_QUIC_METHOD)
-    message(FATAL_ERROR "QUIC support is missing in OpenSSL/boringssl. Try setting -DOPENSSL_ROOT_DIR")
+    message(FATAL_ERROR "QUIC support is missing in OpenSSL/BoringSSL. Try setting -DOPENSSL_ROOT_DIR")
   endif()
   cmake_pop_check_state()
 endfunction()
@@ -514,7 +515,11 @@ endfunction()
 option(USE_NGTCP2 "Use ngtcp2 and nghttp3 libraries for HTTP/3 support" OFF)
 if(USE_NGTCP2)
   if(USE_OPENSSL)
-    find_package(NGTCP2 REQUIRED OpenSSL)
+    if(HAVE_BORINGSSL)
+      find_package(NGTCP2 REQUIRED BoringSSL)
+    else()
+      find_package(NGTCP2 REQUIRED OpenSSL)
+    endif()
     CheckQuicSupportInOpenSSL()
   elseif(USE_GNUTLS)
     # TODO add GnuTLS support as vtls library.
